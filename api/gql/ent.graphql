directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateProjectInput is used for create Project object.
Input was generated by ent.
"""
input CreateProjectInput {
  name: String!
  description: String
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  email: String!
  fullname: String
  username: String
}
"""
CreateUserOnProjectInput is used for create UserOnProject object.
Input was generated by ent.
"""
input CreateUserOnProjectInput {
  isAdmin: Boolean
  userID: ID!
  projectID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/tapestrylabs/fabric/api/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Project implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String
  members: [UserOnProject!]
}
"""A connection to a list of items."""
type ProjectConnection {
  """A list of edges."""
  edges: [ProjectEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Project connections"""
input ProjectOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Projects."""
  field: ProjectOrderField!
}
"""Properties by which Project connections can be ordered."""
enum ProjectOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
ProjectWhereInput is used for filtering Project objects.
Input was generated by ent.
"""
input ProjectWhereInput {
  not: ProjectWhereInput
  and: [ProjectWhereInput!]
  or: [ProjectWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """members edge predicates"""
  hasMembers: Boolean
  hasMembersWith: [UserOnProjectWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Projects returned from the connection."""
    orderBy: ProjectOrder

    """Filtering options for Projects returned from the connection."""
    where: ProjectWhereInput
  ): ProjectConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  userOnProjects(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for UserOnProjects returned from the connection."""
    orderBy: UserOnProjectOrder

    """Filtering options for UserOnProjects returned from the connection."""
    where: UserOnProjectWhereInput
  ): UserOnProjectConnection!
}
"""The builtin Time type"""
scalar Time
"""
UpdateProjectInput is used for update Project object.
Input was generated by ent.
"""
input UpdateProjectInput {
  name: String
  description: String
  clearDescription: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  email: String
  fullname: String
  clearFullname: Boolean
  username: String
  clearUsername: Boolean
}
"""
UpdateUserOnProjectInput is used for update UserOnProject object.
Input was generated by ent.
"""
input UpdateUserOnProjectInput {
  isAdmin: Boolean
  userID: ID
  clearUser: Boolean
  projectID: ID
  clearProject: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  email: String!
  fullname: String
  username: String
  projects: [UserOnProject!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type UserOnProject implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  isAdmin: Boolean!
  user: User!
  project: Project!
}
"""A connection to a list of items."""
type UserOnProjectConnection {
  """A list of edges."""
  edges: [UserOnProjectEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserOnProjectEdge {
  """The item at the end of the edge."""
  node: UserOnProject
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for UserOnProject connections"""
input UserOnProjectOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserOnProjects."""
  field: UserOnProjectOrderField!
}
"""Properties by which UserOnProject connections can be ordered."""
enum UserOnProjectOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
UserOnProjectWhereInput is used for filtering UserOnProject objects.
Input was generated by ent.
"""
input UserOnProjectWhereInput {
  not: UserOnProjectWhereInput
  and: [UserOnProjectWhereInput!]
  or: [UserOnProjectWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """is_admin field predicates"""
  isAdmin: Boolean
  isAdminNEQ: Boolean
  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDEqualFold: ID
  userIDContainsFold: ID
  """project_id field predicates"""
  projectID: ID
  projectIDNEQ: ID
  projectIDIn: [ID!]
  projectIDNotIn: [ID!]
  projectIDGT: ID
  projectIDGTE: ID
  projectIDLT: ID
  projectIDLTE: ID
  projectIDContains: ID
  projectIDHasPrefix: ID
  projectIDHasSuffix: ID
  projectIDEqualFold: ID
  projectIDContainsFold: ID
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """project edge predicates"""
  hasProject: Boolean
  hasProjectWith: [ProjectWhereInput!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  CREATED_AT
  UPDATED_AT
  EMAIL
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """fullname field predicates"""
  fullname: String
  fullnameNEQ: String
  fullnameIn: [String!]
  fullnameNotIn: [String!]
  fullnameGT: String
  fullnameGTE: String
  fullnameLT: String
  fullnameLTE: String
  fullnameContains: String
  fullnameHasPrefix: String
  fullnameHasSuffix: String
  fullnameIsNil: Boolean
  fullnameNotNil: Boolean
  fullnameEqualFold: String
  fullnameContainsFold: String
  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIsNil: Boolean
  usernameNotNil: Boolean
  usernameEqualFold: String
  usernameContainsFold: String
  """projects edge predicates"""
  hasProjects: Boolean
  hasProjectsWith: [UserOnProjectWhereInput!]
}
