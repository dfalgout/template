// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamptz"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamptz"}},
		{Name: "name", Type: field.TypeString, Size: 2147483647},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamptz"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamptz"}},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 2147483647},
		{Name: "fullname", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "username", Type: field.TypeString, Nullable: true, Size: 2147483647},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserOnProjectsColumns holds the columns for the "user_on_projects" table.
	UserOnProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamptz"}},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamptz"}},
		{Name: "is_admin", Type: field.TypeBool, Default: false},
		{Name: "user_id", Type: field.TypeString, Size: 2147483647},
		{Name: "project_id", Type: field.TypeString, Size: 2147483647},
	}
	// UserOnProjectsTable holds the schema information for the "user_on_projects" table.
	UserOnProjectsTable = &schema.Table{
		Name:       "user_on_projects",
		Columns:    UserOnProjectsColumns,
		PrimaryKey: []*schema.Column{UserOnProjectsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_on_projects_users_user",
				Columns:    []*schema.Column{UserOnProjectsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "user_on_projects_projects_project",
				Columns:    []*schema.Column{UserOnProjectsColumns[5]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "useronproject_user_id_project_id",
				Unique:  true,
				Columns: []*schema.Column{UserOnProjectsColumns[4], UserOnProjectsColumns[5]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ProjectsTable,
		UsersTable,
		UserOnProjectsTable,
	}
)

func init() {
	UserOnProjectsTable.ForeignKeys[0].RefTable = UsersTable
	UserOnProjectsTable.ForeignKeys[1].RefTable = ProjectsTable
}
